import{V as d}from"./chunks/theme.b94646ee.js";import{F as i,o as s,c as l,k as o,a,J as t,S as c,l as p}from"./chunks/framework.d5a27ec8.js";const g={id:"前端工程化",tabindex:"-1"},x=JSON.parse('{"title":"前端工程化","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/index.md","filePath":"engineer/index.md","lastUpdated":1684841914000}'),h={name:"engineer/index.md"},k=Object.assign(h,{setup(m){const r=[{avatar:"/logo.jpg",name:"Daotin",title:"Frondend Developer",links:[{icon:"github",link:"https://github.com/daotin"}]},{avatar:"/ChatGPT.jpg",name:"ChatGPT",title:"Personal Assistant",links:[]}];return(u,e)=>{const n=i("Badge");return s(),l("div",null,[o("h1",g,[e[0]||(e[0]=a("前端工程化 ")),t(n,{type:"warning",text:"beta"}),e[1]||(e[1]=a()),e[2]||(e[2]=o("a",{class:"header-anchor",href:"#前端工程化","aria-label":'Permalink to "前端工程化 <Badge type="warning" text="beta" />"'},"​",-1))]),e[3]||(e[3]=c('<h2 id="前端工程化是什么" tabindex="-1">前端工程化是什么 <a class="header-anchor" href="#前端工程化是什么" aria-label="Permalink to &quot;前端工程化是什么&quot;">​</a></h2><p>说了这么多，<code>前端工程化</code>到底是什么？<strong>前端工程化</strong>指使用软件工程的技术与方法对前端开发的技术、工具、流程、经验、方案等指标<code>标准化</code>，它具备<strong>模块化</strong>、<strong>组件化</strong>、<strong>规范化</strong>、<strong>自动化</strong>四大特性，主要目的是<code>降低成本</code>与<code>增加效率</code>。</p><h3 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h3><p><strong>模块化</strong>指将一个复杂应用根据预设规范封装为多个块并组合起来，对内实现数据私有化，对外暴露接口与其它模块通信。它在<code>前端工程化</code>中具体表现为：在文件层面上对代码与资源实现拆分与组装，将一个大文件拆分为互相依赖的小文件，再统一拼装与加载。</p><p>具体体现</p><ul><li>目录结构</li></ul><h3 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h3><p><strong>组件化</strong>指将一个具备通用功能的交互设计划分为模板、样式和逻辑组成的功能单元，对内管理内部状态满足交互需求，对外提供属性接口扩展用户需求。</p><p>它实现了代码更高层次的复用性，提升开发效率。组件的封装也是对象的封装，同样要做到<strong>高内聚低耦合</strong>，<code>组件化</code>的项目不仅利于<code>单元测试</code>的进行，同样也利于需求迭代的推进。</p><p>有些同学可能会将<code>模块化</code>与<code>组件化</code>混淆，其实了解它们的概念就很易区分了。<strong>模块化着重在文件层面上对代码与资源实现拆分与组装，组件化着重在功能层面上对交互与设计实现拆分与组装</strong>。</p><h3 id="规范化" tabindex="-1">规范化 <a class="header-anchor" href="#规范化" aria-label="Permalink to &quot;规范化&quot;">​</a></h3><p><strong>规范化</strong>指将一系列预设规范接入工程各个阶段，通过各项指标标准化开发者的工作流程，引导开发者在团队协作中往更好的方向发展。</p><p><code>规范化</code>是<code>前端工程化</code>的重要部分。它有效地将一盘松散的规范通过指定标准凝聚在一起，将所有工作流程标准化，协同所有开发者以标准化的方式定义工作流程，同时也影响着代码、文档和日志，甚至影响着每个开发者及其团队发展方向，因此每个成熟的前端团队都有一套身经百战的<code>规范化方案</code>。</p><h3 id="自动化" tabindex="-1">自动化 <a class="header-anchor" href="#自动化" aria-label="Permalink to &quot;自动化&quot;">​</a></h3><p><strong>自动化</strong>指将一系列繁琐重复的工作流程交由程序根据预设脚本自动处理，整个工作流程无需人工参与，以解放开发者双手让其更专注业务需求的开发。</p><p>常见<code>自动化</code>场景包括但不限于</p><ul><li><code>自动化构建</code></li><li><code>自动化测试</code></li><li><code>自动化打包</code></li><li><code>自动化发布</code></li><li><code>自动化部署</code></li></ul><p>更高级的自动化场景包括但不限于</p><ul><li><code>持续集成</code></li><li><code>持续交付</code></li><li><code>持续部署</code></li></ul><hr>',20)),t(p(d),{size:"small",members:r})])}}});export{x as __pageData,k as default};
